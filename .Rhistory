set.seed(5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/")
library("AppliedPredictiveModeling")
library("caret")
library("leaps")
library("glmnet")
datos_housing = read.csv("./datos/housing.data")
head(datos_housing)
getwd()
datos_housing = read.csv("./datos/housing.data")
head(datos_housing)
View(datos_housing)
set.seed(5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/")
library("AppliedPredictiveModeling")
library("caret")
library("leaps")
library("glmnet")
datos_housing = read_delim("~/Documents/Universidad/3_carrera/2_CUATRIMESTRE/AA/PRACTICAS/proyecto/datos/housing.data"," ", escape_double = FALSE, trim_ws = TRUE)
library("readr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
set.seed(5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/")
library("AppliedPredictiveModeling")
library("caret")
library("leaps")
library("glmnet")
library("readr")
datos_housing = read_delim("~/Documents/Universidad/3_carrera/2_CUATRIMESTRE/AA/PRACTICAS/proyecto/datos/housing.data"," ", escape_double = FALSE, trim_ws = TRUE)
set.seed(5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/")
library("AppliedPredictiveModeling")
library("caret")
library("leaps")
library("glmnet")
library("readr")
datos_housing = read_delim("datos/housing.data"," ", escape_double = FALSE, trim_ws = TRUE)
head(datos_housing)
prueba_housing = read.csv("./datos/housing.data")
prueba_housing
class(prueba_housing)
set.seed(5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/")
library("AppliedPredictiveModeling")
library("caret")
library("leaps")
library("glmnet")
library("readr")
datos_housing = read_csv("datos/housing.data")
head(datos_housing)
datos_housing
prueba2 = read.csv("./datos/housing.data")
prueba2
set.seed(5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/")
library("AppliedPredictiveModeling")
library("caret")
library("leaps")
library("glmnet")
library("readr")
datos_housing = read_csv("./datos/housing.data")
head(datos_housing)
datos_housing
View(prueba2)
prueba2
set.seed(5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/")
library("AppliedPredictiveModeling")
library("caret")
library("leaps")
library("glmnet")
library("readr")
datos_housing = read_csv("./datos/housing.data")
head(datos_housing)
datos_housting = as.data.frame(datos_housting)
set.seed(5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/")
library("AppliedPredictiveModeling")
library("caret")
library("leaps")
library("glmnet")
library("readr")
datos_housing = read_csv("./datos/housing.data")
head(datos_housing)
datos_housing = as.data.frame(datos_housing)
set.seed(5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/")
library("AppliedPredictiveModeling")
library("caret")
library("leaps")
library("glmnet")
library("readr")
datos_housing = read_csv("./datos/housing.data")
head(datos_housing)
datos_housing
datos_housing = as.data.frame(datos_housing)
datos_housing
datos_housing
set.seed(5)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/")
library("AppliedPredictiveModeling")
library("caret")
library("leaps")
library("glmnet")
library("readr")
datos_housing = as.data.frame( read_csv("datos/housing.data"))
head(datos_housing)
#Si queremos obtener un conjunto de indices train para luego ejecutar un modelo lineal sobre el train:
train = sample (nrow(datos_housing), round(nrow(datos_housing)*0.8))
#definimos ambos conjuntos en dos data.frame diferentes:
housing_train = datos_housing[train,]
housing_test = datos_housing[-train,]
pairs(datos_housing)
housingTrans = preProcess(datos_housing[,-which(names(datos_housing) == "MEDV")], method = c("BoxCox", "center", "scale", "pca"), thresh = 0.9)
housingTrans$rotation
nearZeroVar(housingTrans$rotation)
housingTrans = preProcess(housing_train[,-which(names(housing_train) == "MEDV")],
method = c("BoxCox", "center", "scale"),thresh = 0.9)
housing_train[,-which(names(housing_train) == "MEDV")]=predict(housingTrans,
housing_train[,-which(names(housing_train) == "MEDV")])
housing_test[,-which(names(housing_test) == "MEDV")] =predict(housingTrans,housing_test[,-which(names(housing_test) == "MEDV")])
regsub_housing =regsubsets(datos_housing[,-which(names(datos_housing) == "MEDV")],
datos_housing[,which(names(datos_housing) == "MEDV")])
summary(regsub_housing)
